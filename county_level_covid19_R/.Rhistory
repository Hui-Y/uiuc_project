else {
covid19[c_index, var_index[v1]] = nbc1 * cpop/nbpop1 + nbc2 * cpop/nbpop2
}
}
}
# DiabetesPercentage, HeartDiseaseMortality, StrokeMortality, dem_to_rep_ratio
for (v3 in 3:6){
submiss2 = covid19[is.na(covid19[, var_index[v3]]), ]
for (i in 1:nrow(submiss2)){
id = submiss2[i, 1]
n_index = which(as.factor(state_index) == submiss2[i, 3])
pre = neighbor_county[[n_index]]
i_index = which(pre[, 1] == id)
c_index = neighbor_county3[[n_index]][i_index, 1]
nbc_index = neighbor_county3[[n_index]][i_index, 2]
nbc_index2 = neighbor_county3[[n_index]][i_index, 3]
nbc1 = covid19_pre[nbc_index, var_index[v3]]
nbc2 = covid19_pre[nbc_index2, var_index[v3]]
if (nbc1 != 0 & nbc2 != 0) {
covid19[c_index, var_index[v3]] = (nbc1 + nbc2)/2
}
else {
covid19[c_index, var_index[v3]] = nbc1 + nbc2
}
}
}
# pre-process data
covid_sub1 = covid19 %>%
mutate(pop_total = PopTotalMale2017 + PopTotalFemale2017,
under65 = 1 - PopulationEstimate65.2017/pop_total,
above65 = 1 - under65,
medicare = MedicareEnrollment.AgedTot2017/pop_total,
hosp_emp = X.FTEHospitalTotal2017/(pop_total/100000),
hosp_MD = TotalM.D..s.TotNon.FedandFed2017/(pop_total/100000),
hosp = X.Hospitals/(pop_total/1000000),
icu = X.ICU_beds/(pop_total/100000),
tot_cases = tot_cases/(pop_total/100000),
tot_deaths = tot_deaths/(pop_total/100000)) %>%
rename(pop_density = PopulationDensityperSqMile2010,
diabetes_pct = DiabetesPercentage,
smokers_pct = Smokers_Percentage,
heart_mort = HeartDiseaseMortality,
stroke_mort = StrokeMortality) %>%
dplyr::select(pop_total, pop_density, under65, above65, medicare, diabetes_pct, smokers_pct, heart_mort, stroke_mort, hosp_emp, hosp, icu, tot_cases, tot_deaths)
# descriptive statistics
covid_stats = data.frame(Mean=apply(covid_sub1, 2, mean), # mean
Med=apply(covid_sub1, 2, median), # median
SD=apply(covid_sub1, 2, sd), # Standard deviation
Min=apply(covid_sub1, 2, min), # minimum
Max=apply(covid_sub1, 2, max) # maximum
)
covid_stats = round(covid_stats, 2)
tibble(
"Variables" = c("Total Population", "Population Density", "Under65", "Above 65", "Medicare Enrollment", "Diabetes Percent", "Smokers Percent", "Heart Mortality", "Stroke Mortality", "Hospital Employees", "Hospital", "ICU", "Total Cases", "Total Deaths"),
"Mean" = covid_stats[, 1],
"Median" = covid_stats[, 2],
"Standard Deviation" = covid_stats[, 3],
"Min" = covid_stats[, 4],
"Max" = covid_stats[, 5]) %>%
kable(caption = "Descriptive Statistics") %>%
kable_styling("striped", full_width = FALSE, position = "center")
# standardize data
covid_scale = scale(covid_sub1)
# hierarchical
set.seed(1)
covid_hc1 = hclust(dist(covid_scale), method = "complete")
# plot dendrogram and get four clusters
plot(covid_hc1, hang=-1, cex=0.5, labels = NULL)
group1 = cutree(covid_hc1, k=4)
# cluster distribution
table_hc1 = table(group1)
tibble(
"Cluster 1" = as.vector(table_hc1[1]),
"Cluster 2" = as.vector(table_hc1[2]),
"Cluster 3" = as.vector(table_hc1[3]),
"Cluster 4" = as.vector(table_hc1[4])) %>%
kable(caption = "Hierarchical Clusters Distribution") %>%
kable_styling("striped", full_width = FALSE, position = "center", font_size = 8)
# pca
covid_cord = prcomp(covid_scale)$rotation[, 1:7]
covid_pca = covid_scale %*% covid_cord
# hierarchical after pca
set.seed(1)
covid_hc2 = hclust(dist(covid_pca), method = "complete")
# plot dendrogram and get four clusters
plot(covid_hc2, hang=-1, cex=0.5, labels = NULL)
group2 = cutree(covid_hc2, k=4)
# cluster distribution after pca
table_hc2 = table(group2)
tibble(
"Cluster 1" = as.vector(table_hc2[1]),
"Cluster 2" = as.vector(table_hc2[2]),
"Cluster 3" = as.vector(table_hc2[3]),
"Cluster 4" = as.vector(table_hc2[4])) %>%
kable(caption = "Hierarchical Clusters Distribution after PCA") %>%
kable_styling("striped", full_width = FALSE, position = "center", font_size = 8)
# kmeans
set.seed(1)
covid_km = kmeans(covid_scale, centers = 4, nstart = 20)
# cluster distribution
table_km = table(covid_km$cluster)
tibble(
"Cluster 1" = as.vector(table_km[1]),
"Cluster 2" = as.vector(table_km[2]),
"Cluster 3" = as.vector(table_km[3]),
"Cluster 4" = as.vector(table_km[4])) %>%
kable(caption = "K-means Clusters Distribution") %>%
kable_styling("striped", full_width = FALSE, position = "center", font_size = 8)
# check cluster results
covid_scale_km = cbind(cluster = covid_km$cluster, covid_sub1)
covid_stats_km = as.data.frame(covid_scale_km) %>%
group_by(cluster) %>%
summarise_all(mean)
# mean analysis
tibble(
"Cluster" = c("1", "2", "3", "4"),
"Population" = covid_stats_km[, 2],
"Density" = round(covid_stats_km[, 3], 3),
"> 65" = round(covid_stats_km[, 5], 2),
"Diabetes" = round(covid_stats_km[, 7], 2),
"Smokers" = round(covid_stats_km[, 8], 2),
"Heart" = round(covid_stats_km[, 9], 2),
"Stroke" = round(covid_stats_km[, 10], 2),
"ICU" = round(covid_stats_km[, 13], 2),
"Cases" = round(covid_stats_km[, 14], 2),
"Deaths" = round(covid_stats_km[, 15], 2)) %>%
kable(caption = "Mean Analysis for K-means Clustering") %>%
kable_styling("striped", full_width = TRUE, position = "center", font_size = 6)
# mean analysis
tibble(
"Cluster" = c("1", "2", "3", "4"),
"Population" = covid_stats_km[, 2],
"Density" = round(covid_stats_km[, 3], 3),
"> 65" = round(covid_stats_km[, 5], 2),
"Diabetes" = round(covid_stats_km[, 7], 2),
"Smokers" = round(covid_stats_km[, 8], 2),
"Heart" = round(covid_stats_km[, 9], 2),
"Stroke" = round(covid_stats_km[, 10], 2),
"ICU" = round(covid_stats_km[, 13], 2),
"Cases" = round(covid_stats_km[, 14], 2),
"Deaths" = round(covid_stats_km[, 15], 2)) %>%
kable(caption = "Mean Analysis for K-means Clustering") %>%
kable_styling("striped", full_width = TRUE, position = "center", font_size = 6)
# combine cluster label with data
covid_sub3 = cbind(covid_km$cluster, covid_sub1[, 1], covid19[, 55:146], covid19[, 147:238])
# calculate mean cases and deaths for each cluster
cluster_km1 = covid_sub3[which(covid_sub3[, 1] == 1), 2:186]
cluster_km2 = covid_sub3[which(covid_sub3[, 1] == 2), 2:186]
cluster_km3 = covid_sub3[which(covid_sub3[, 1] == 3), 2:186]
cluster_km4 = covid_sub3[which(covid_sub3[, 1] == 4), 2:186]
sum_cluster_km1 = apply(cluster_km1, 2, sum)
sum_cluster_km2 = apply(cluster_km2, 2, sum)
sum_cluster_km3 = apply(cluster_km3, 2, sum)
sum_cluster_km4 = apply(cluster_km4, 2, sum)
grow_cluster_km1 = round(sum_cluster_km1[-1]/(sum_cluster_km1[1]/10000000), 0)
grow_cluster_km2 = round(sum_cluster_km2[-1]/(sum_cluster_km2[1]/10000000), 0)
grow_cluster_km3 = round(sum_cluster_km3[-1]/(sum_cluster_km3[1]/10000000), 0)
grow_cluster_km4 = round(sum_cluster_km4[-1]/(sum_cluster_km4[1]/10000000), 0)
# build date as x-axis
x_date = seq(as.Date("2020-1-22"), as.Date("2020-4-22"), 1)
# covid cases growing of each cluster
cases_grow_km = data.frame(date = x_date, grow_cluster_km1[1:92], grow_cluster_km2[1:92], grow_cluster_km3[1:92], grow_cluster_km4[1:92])
gg_km1 = ggplot(cases_grow_km) +
geom_line(aes(date, grow_cluster_km1[1:92], color = "1"))+
geom_line(aes(date, grow_cluster_km2[1:92], color = "2")) +
geom_line(aes(date, grow_cluster_km3[1:92], color = "3")) +
geom_line(aes(date, grow_cluster_km4[1:92], color = "4")) +
labs(title = "K-means COVID-19 Cases Growing", x = "Date", y = "Total Cases") +
scale_colour_manual(name = "Cluster", values = c('1' = "firebrick", '2' = "deepskyblue", '3' = "darkorange", '4' = "lightgreen"))+
theme(plot.title = element_text(hjust = 0.5))
# covid deaths growing of each cluster
deaths_grow_km = data.frame(date = x_date, grow_cluster_km1[93:184], grow_cluster_km2[93:184], grow_cluster_km3[93:184], grow_cluster_km4[93:184])
gg_km2 = ggplot(deaths_grow_km) +
geom_line(aes(date, grow_cluster_km1[93:184], color = "1")) +
geom_line(aes(date, grow_cluster_km2[93:184], color = "2")) +
geom_line(aes(date, grow_cluster_km3[93:184], color = "3")) +
geom_line(aes(date, grow_cluster_km4[93:184], color = "4")) +
labs(title = "K-means COVID-19 Deaths Growing", x = "Date", y = "Total Deaths") +
scale_colour_manual(name = "Cluster", values = c('1' = "firebrick", '2' = "deepskyblue", '3' = "darkorange", '4' = "lightgreen"))+
theme(plot.title = element_text(hjust = 0.5))
# plot
gridExtra::grid.arrange(gg_km1, gg_km2, ncol = 2)
unit = 100000
c_covid19 = covid19 %>%
mutate(avgdeaths = factor(case_when(tot_deaths/(PopulationEstimate2018/unit) > 1 ~ "1",
TRUE ~ "0")),
gender_ratio = FracMale2017,
old_rate = PopulationEstimate65.2017/(PopulationEstimate2018/unit),
demo_density = PopulationDensityperSqMile2010,
median_age = MedianAge2010,
medicare_rate = X.EligibleforMedicare2018/(PopulationEstimate2018/unit),
hospital_employee_rate = X.FTEHospitalTotal2017/(PopulationEstimate2018/unit),
mds = TotalM.D..s.TotNon.FedandFed2017/(PopulationEstimate2018/unit),
network = scale(X.HospParticipatinginNetwork2017),
hospitals = scale(X.Hospitals),
icu = scale(X.ICU_beds)) %>%
dplyr::select(avgdeaths, countyFIPS, StateName, POP_LATITUDE, POP_LONGITUDE, gender_ratio, old_rate, demo_density, median_age, medicare_rate, 16:19, hospital_employee_rate, mds, network, hospitals, icu)
ncol(c_covid19)
knitr::opts_chunk$set(echo = FALSE, fig.align = 'center')
library(tidyverse)
library(caret)
library(tibble)
library(kableExtra)
library(randomForest)
library(glmnet)
library(purrr)
library(ggplot2)
library(gridExtra)
library(mgcv)
library(party)
library(e1071)
library(class)
library(klaR)
library(xgboost)
library(dplyr)
library(kohonen)
library(umap)
covid19_raw = read.csv("county_data_apr22.csv")
# subset
covid19 = covid19_raw %>%
dplyr::select(countyFIPS, CountyName, StateName, POP_LATITUDE, POP_LONGITUDE, 15:24, 26:29, 31:35, dem_to_rep_ratio, 37:64, stay.at.home, 89:180, 181:272, tot_cases, tot_deaths)
# neighboring counties
state_index = c(sort(unique(covid19$StateName)))
neighbor_county = list() # pairs of countyFIPS
neighbor_county2 = list() # pairs of row numbers
neighbor_county3 = list() # 2 nearest neighbor
for (n in 1:length(state_index)){
neighbor = covid19 %>%
filter(StateName == state_index[n]) %>%
dplyr::select(countyFIPS, POP_LATITUDE, POP_LONGITUDE)
# calculate distance
alldist = as.matrix(dist(neighbor[, -1], method = "euclidean", upper = T, diag = 0))
nc = matrix(NA, nrow(neighbor), 2) # countyFIP
nc2 = matrix(NA, nrow(neighbor), 2) # row number
nc3 = matrix(NA, nrow(neighbor), 3)
for (i in 1:nrow(neighbor)){
index = which.min(alldist[-i, i]); index2 = order(alldist[-i, i])[2]
subnc = matrix(c(neighbor$countyFIPS[i], neighbor$countyFIPS[index]), 1, 2)
nc[i, ] = subnc
ori = which(covid19$countyFIPS == neighbor$countyFIPS[i])
nb = which(covid19$countyFIPS == neighbor$countyFIPS[index])
nc2[i, ] = cbind(ori, nb)
nb2 = which(covid19$countyFIPS == neighbor$countyFIPS[index2])
nc3[i, ] = cbind(ori, nb, nb2)
}
neighbor_county[[n]] = nc; neighbor_county2[[n]] = nc2; neighbor_county3[[n]] = nc3
}
# check for missing values
count_na = function(x){
sum(is.na(x))
}
covid19_miss = apply(covid19, 2, count_na)
covid19_miss[covid19_miss != 0]
# fill the missing values with neighboring counties'
covid19_pre = covid19
covid19_pre[is.na(covid19_pre)] = 0
var_index = c(14, 15, 16, 17, 18, 25) # v
# X.EligibleforMedicare2018, MedicareEnrollment.AgedTot2017
for (v1 in 1:2){
submiss = covid19[is.na(covid19[, var_index[v1]]), ]
for (i in 1:nrow(submiss)){
id = submiss[i, 1]
n_index = which(as.factor(state_index) == submiss[i, 3])
pre = neighbor_county[[n_index]]
i_index = which(pre[, 1] == id)
c_index = neighbor_county3[[n_index]][i_index, 1]
nbc_index = neighbor_county3[[n_index]][i_index, 2]
nbc_index2 = neighbor_county3[[n_index]][i_index, 3]
nbc1 = covid19_pre[nbc_index, var_index[v1]]
nbc2 = covid19_pre[nbc_index2, var_index[v1]]
cpop = covid19[c_index, 6]
nbpop1 = covid19[nbc_index, 6]
nbpop2 = covid19[nbc_index2, 6]
# X.EligibleforMedicare2018/PopulationEstimate2018
# MedicareEnrollment.AgedTot2017/PopulationEstimate2018
if (nbc1 != 0 & nbc2 != 0) {
covid19[c_index, var_index[v1]] = (nbc1 * cpop/nbpop1 + nbc2 * cpop/nbpop2)/2
}
else {
covid19[c_index, var_index[v1]] = nbc1 * cpop/nbpop1 + nbc2 * cpop/nbpop2
}
}
}
# DiabetesPercentage, HeartDiseaseMortality, StrokeMortality, dem_to_rep_ratio
for (v3 in 3:6){
submiss2 = covid19[is.na(covid19[, var_index[v3]]), ]
for (i in 1:nrow(submiss2)){
id = submiss2[i, 1]
n_index = which(as.factor(state_index) == submiss2[i, 3])
pre = neighbor_county[[n_index]]
i_index = which(pre[, 1] == id)
c_index = neighbor_county3[[n_index]][i_index, 1]
nbc_index = neighbor_county3[[n_index]][i_index, 2]
nbc_index2 = neighbor_county3[[n_index]][i_index, 3]
nbc1 = covid19_pre[nbc_index, var_index[v3]]
nbc2 = covid19_pre[nbc_index2, var_index[v3]]
if (nbc1 != 0 & nbc2 != 0) {
covid19[c_index, var_index[v3]] = (nbc1 + nbc2)/2
}
else {
covid19[c_index, var_index[v3]] = nbc1 + nbc2
}
}
}
# pre-process data
covid_sub1 = covid19 %>%
mutate(pop_total = PopTotalMale2017 + PopTotalFemale2017,
under65 = 1 - PopulationEstimate65.2017/pop_total,
above65 = 1 - under65,
medicare = MedicareEnrollment.AgedTot2017/pop_total,
hosp_emp = X.FTEHospitalTotal2017/(pop_total/100000),
hosp_MD = TotalM.D..s.TotNon.FedandFed2017/(pop_total/100000),
hosp = X.Hospitals/(pop_total/1000000),
icu = X.ICU_beds/(pop_total/100000),
tot_cases = tot_cases/(pop_total/100000),
tot_deaths = tot_deaths/(pop_total/100000)) %>%
rename(pop_density = PopulationDensityperSqMile2010,
diabetes_pct = DiabetesPercentage,
smokers_pct = Smokers_Percentage,
heart_mort = HeartDiseaseMortality,
stroke_mort = StrokeMortality) %>%
dplyr::select(pop_total, pop_density, under65, above65, medicare, diabetes_pct, smokers_pct, heart_mort, stroke_mort, hosp_emp, hosp, icu, tot_cases, tot_deaths)
# descriptive statistics
covid_stats = data.frame(Mean=apply(covid_sub1, 2, mean), # mean
Med=apply(covid_sub1, 2, median), # median
SD=apply(covid_sub1, 2, sd), # Standard deviation
Min=apply(covid_sub1, 2, min), # minimum
Max=apply(covid_sub1, 2, max) # maximum
)
covid_stats = round(covid_stats, 2)
tibble(
"Variables" = c("Total Population", "Population Density", "Under65", "Above 65", "Medicare Enrollment", "Diabetes Percent", "Smokers Percent", "Heart Mortality", "Stroke Mortality", "Hospital Employees", "Hospital", "ICU", "Total Cases", "Total Deaths"),
"Mean" = covid_stats[, 1],
"Median" = covid_stats[, 2],
"Standard Deviation" = covid_stats[, 3],
"Min" = covid_stats[, 4],
"Max" = covid_stats[, 5]) %>%
kable(caption = "Descriptive Statistics") %>%
kable_styling("striped", full_width = FALSE, position = "center")
# standardize data
covid_scale = scale(covid_sub1)
# hierarchical
set.seed(1)
covid_hc1 = hclust(dist(covid_scale), method = "complete")
# plot dendrogram and get four clusters
plot(covid_hc1, hang=-1, cex=0.5, labels = NULL)
group1 = cutree(covid_hc1, k=4)
# cluster distribution
table_hc1 = table(group1)
tibble(
"Cluster 1" = as.vector(table_hc1[1]),
"Cluster 2" = as.vector(table_hc1[2]),
"Cluster 3" = as.vector(table_hc1[3]),
"Cluster 4" = as.vector(table_hc1[4])) %>%
kable(caption = "Hierarchical Clusters Distribution") %>%
kable_styling("striped", full_width = FALSE, position = "center", font_size = 8)
# pca
covid_cord = prcomp(covid_scale)$rotation[, 1:7]
covid_pca = covid_scale %*% covid_cord
# hierarchical after pca
set.seed(1)
covid_hc2 = hclust(dist(covid_pca), method = "complete")
# plot dendrogram and get four clusters
plot(covid_hc2, hang=-1, cex=0.5, labels = NULL)
group2 = cutree(covid_hc2, k=4)
# cluster distribution after pca
table_hc2 = table(group2)
tibble(
"Cluster 1" = as.vector(table_hc2[1]),
"Cluster 2" = as.vector(table_hc2[2]),
"Cluster 3" = as.vector(table_hc2[3]),
"Cluster 4" = as.vector(table_hc2[4])) %>%
kable(caption = "Hierarchical Clusters Distribution after PCA") %>%
kable_styling("striped", full_width = FALSE, position = "center", font_size = 8)
# kmeans
set.seed(1)
covid_km = kmeans(covid_scale, centers = 4, nstart = 20)
# cluster distribution
table_km = table(covid_km$cluster)
tibble(
"Cluster 1" = as.vector(table_km[1]),
"Cluster 2" = as.vector(table_km[2]),
"Cluster 3" = as.vector(table_km[3]),
"Cluster 4" = as.vector(table_km[4])) %>%
kable(caption = "K-means Clusters Distribution") %>%
kable_styling("striped", full_width = FALSE, position = "center", font_size = 8)
# check cluster results
covid_scale_km = cbind(cluster = covid_km$cluster, covid_sub1)
covid_stats_km = as.data.frame(covid_scale_km) %>%
group_by(cluster) %>%
summarise_all(mean)
# mean analysis
tibble(
"Cluster" = c("1", "2", "3", "4"),
"Population" = covid_stats_km[, 2],
"Density" = round(covid_stats_km[, 3], 3),
"> 65" = round(covid_stats_km[, 5], 2),
"Diabetes" = round(covid_stats_km[, 7], 2),
"Smokers" = round(covid_stats_km[, 8], 2),
"Heart" = round(covid_stats_km[, 9], 2),
"Stroke" = round(covid_stats_km[, 10], 2),
"ICU" = round(covid_stats_km[, 13], 2),
"Cases" = round(covid_stats_km[, 14], 2),
"Deaths" = round(covid_stats_km[, 15], 2)) %>%
kable(caption = "Mean Analysis for K-means Clustering") %>%
kable_styling("striped", full_width = TRUE, position = "center", font_size = 6)
neighbor_location = function(i, data){
id = data[i, 1]
# StateName: [, 3], which state
n_index = which(as.factor(state_index) == data[i, 2])
pre = neighbor_county[[n_index]]
i_index = which(pre[, 1] == id)
# row number
c_index = neighbor_county3[[n_index]][i_index, 1]
nbc_index = neighbor_county3[[n_index]][i_index, 2]
return(list("nb1" = nbc_index))
}
unit = 100000
sub_candd = covid19 %>%
dplyr::select(141:146, 233:238)
log_candd = log(sub_candd + 1)
r_covid19 = covid19 %>%
mutate(demo_density = PopulationDensityperSqMile2010,
median_age = MedianAge2010,
medicare_rate = X.EligibleforMedicare2018/(PopulationEstimate2018/unit),
hospitals = scale(X.Hospitals),
icu = scale(X.ICU_beds)) %>%
dplyr::select(countyFIPS, StateName, CountyName, POP_LATITUDE, POP_LONGITUDE, demo_density, median_age, medicare_rate, 16:19, hospitals, icu)
r_covid19 = cbind(r_covid19, log_candd)
ncol(r_covid19)
head(r_covid19)
# neighboring counties
nb_deaths0421 = matrix(NA, nrow(r_covid19), 1)
nb_deaths0422 = matrix(NA, nrow(r_covid19), 1)
for (i in 1:nrow(r_covid19)){
id_nb = neighbor_location(i, r_covid19)
nb_0421d = r_covid19[id_nb$nb1, 25]
nb_0422d = r_covid19[id_nb$nb1, 26]
nb_deaths0421[i, ] = nb_0421d
nb_deaths0422[i, ] = nb_0422d
}
r_covid19_nb = cbind(r_covid19, cbind(nb_deaths0421, nb_deaths0422))
names(r_covid19_nb)[27:28] = c("nb_deaths0421", "nb_deaths0422")
# acquire updated information
covid_new = read.csv("https://raw.githubusercontent.com/Yu-Group/covid19-severity-prediction/master/data/county_level/processed/nytimes_infections/nytimes_infections.csv", header = TRUE)
covid_updated = covid_new%>%
dplyr::select(countyFIPS, 95:101, 209:215)
countyFIPS = as.character(covid_updated[, 1])
for (i in 1:293){
county_id = substring(covid_updated[i, 1], 2, 5)
countyFIPS[i] = county_id
}
countyFIPS = as.factor(countyFIPS)
covid_new = as.data.frame(cbind(countyFIPS, covid_updated[, -1]))
covid19_new = merge(r_covid19_nb, covid_new, by = "countyFIPS", all = F)
colnames(covid19_new)[15:28] = c("cases_t5", "cases_t4", "cases_t3", "cases_t2", "cases_t1",
"cases_t0", "deaths_t5", "deaths_t4", "deaths_t3", "deaths_t2",
"deaths_t1", "deaths_t0", "nb_deaths_t1", "nb_deaths_t0")
covid19_trn = covid19_new %>%
dplyr::select(4:14, 21:27)
covid19_tst01 = covid19_new %>%
dplyr::select(1:2, 4:14, 21:28) %>%
mutate(deaths_t5 = deaths_t4, deaths_t4 = deaths_t3, deaths_t3 = deaths_t2,
deaths_t2 = deaths_t1, deaths_t1 = deaths_t0, nb_deaths_t1 = nb_deaths_t0) %>%
dplyr::select(-deaths_t0, -nb_deaths_t0)
calc_rmse = function(actual, predicted) {
sqrt(mean( (actual - predicted) ^ 2) )
}
calc_mae = function(actual, predict){
mean(abs(actual - predict))
}
set.seed(1)
# random forest
rf_rmod_exp = train(form = deaths_t0 ~ ., data = covid19_trn, method = "rf",
trControl = trainControl(method = "oob"), metric = "RMSE", importance = TRUE)
rf_imp = importance(rf_rmod_exp$finalModel, type = 1)
rf_imp = rf_imp[order(rf_imp), ]
dotchart(rf_imp, xlab = "Mean Decrease in Accuracy", main = "Regression: Variable Importance (Random Forest)", bg = "skyblue", cex = 0.4)
set.seed(1)
cv = trainControl(method = "cv", number = 10)
set.seed(1)
cv = trainControl(method = "cv", number = 10)
set.seed(1)
# glm
glm_rmod_exp = train(form = deaths_t0 ~ ., data = covid19_trn, method = "glmnet",
trControl = cv, metric = "RMSE", importance = TRUE)
glm_coef = coef.glmnet(glm_rmod_exp$finalModel)
glm_imp = varImp(glm_rmod_exp$finalModel)
tibble("Predictor" = "Overall",
"deaths_t1" = glm_imp[16, ],
"deaths_t2" = glm_imp[15, ],
"deaths_t3" = glm_imp[14, ]) %>%
kable(digits = 6,
caption = "Variable Importance (GLM | Non-zero part)") %>%
kable_styling("striped", full_width = FALSE, position = "center", font_size = 8)
set.seed(1)
cv = trainControl(method = "cv", number = 10)
set.seed(1)
# glm
glm_rmod_exp = train(form = deaths_t0 ~ ., data = covid19_trn, method = "glmnet",
trControl = cv, metric = "RMSE", importance = TRUE)
glm_coef = coef.glmnet(glm_rmod_exp$finalModel)
glm_imp = varImp(glm_rmod_exp$finalModel)
tibble("Predictor" = "Overall",
"deaths_t1" = glm_imp[16, ],
"deaths_t2" = glm_imp[15, ],
"deaths_t3" = glm_imp[14, ]) %>%
kable(digits = 6,
caption = "Variable Importance (GLM | Non-zero part)") %>%
kable_styling("striped", full_width = FALSE, position = "center", font_size = 8)
glm_coef
glm_rmod_exp$bestTune
